// Generated by Xata Codegen 0.29.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  { name: "users", columns: [{ name: "name", type: "string", unique: true }] },
  {
    name: "brain",
    columns: [
      { name: "name", type: "string" },
      { name: "content", type: "text" },
    ],
  },
  { name: "ear", columns: [] },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Brain = InferredTypes["brain"];
export type BrainRecord = Brain & XataRecord;

export type Ear = InferredTypes["ear"];
export type EarRecord = Ear & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
  brain: BrainRecord;
  ear: EarRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://kxwxn-s-workspace-pf3r84.us-east-1.xata.sh/db/authDB",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
